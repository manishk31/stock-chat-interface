import { NextRequest, NextResponse } from 'next/server';

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

// Helper function to detect if query is for individual stock or advanced screening
function isIndividualStockQuery(query: string): boolean {
  const stockSymbols = [
    'INFOSYS', 'TCS', 'HDFC', 'RELIANCE', 'TATAMOTORS', 'TATASTEEL', 'WIPRO', 'HCLTECH', 'TECHM', 'MINDTREE',
    'LTI', 'MPHASIS', 'PERSISTENT', 'COFORGE', 'L&T', 'BHARTIARTL', 'ITC', 'AXISBANK', 'ICICIBANK', 'KOTAKBANK',
    'SBIN', 'HINDUNILVR', 'MARUTI', 'BAJFINANCE', 'BAJAJFINSV', 'ASIANPAINT', 'ULTRACEMCO', 'NESTLEIND', 'SUNPHARMA',
    'DRREDDY', 'CIPLA', 'DIVISLAB', 'TATACONSUM', 'BRITANNIA', 'HINDALCO', 'VEDL', 'JSWSTEEL', 'ADANIENT', 'ADANIPORTS'
  ];
  
  const cleanQuery = query.trim().toUpperCase();
  
  // Check if query is exactly a stock symbol
  if (stockSymbols.includes(cleanQuery)) {
    return true;
  }
  
  // Check if query contains stock symbol patterns
  const symbolPatterns = [
    /^[A-Z]{2,10}$/, // 2-10 uppercase letters
    /^[A-Z]{2,10}\s*\([A-Z]+\)$/, // Symbol (NAME)
    /^[A-Z]{2,10}\s+stock$/i, // Symbol stock
    /^[A-Z]{2,10}\s+share$/i, // Symbol share
  ];
  
  return symbolPatterns.some(pattern => pattern.test(cleanQuery));
}

export async function POST(req: NextRequest) {
  try {
    if (!OPENAI_API_KEY) {
      console.error('OpenAI API key not set');
      return NextResponse.json({ error: 'OpenAI API key not set' }, { status: 500 });
    }
    
    const body = await req.json();
    console.log('Request body:', JSON.stringify(body, null, 2));
    
    const { symbol, userInput, stockData, history, price, eps, roe, roce, netMargin, debtEquity, promoterHolding, rsi, analystRatings } = body;

    // Determine if this is an individual stock query or advanced screening
    const query = userInput || symbol || '';
    const isIndividualStock = isIndividualStockQuery(query);
    
    console.log('Query:', query);
    console.log('Is individual stock:', isIndividualStock);

    if (isIndividualStock) {
      console.log('Processing individual stock analysis...');
      
      // If a symbol is provided, fetch all available data for that symbol and merge with any user-supplied overrides
      if (symbol) {
        // 1. Fetch full dataset for the symbol
        let datasetEntry = stockData;
        if (!datasetEntry) {
          // Try to fetch from stock API
          try {
            const stockResponse = await fetch(`${req.nextUrl.origin}/api/stock?symbol=${symbol}`);
            if (stockResponse.ok) {
              const stockDataResponse = await stockResponse.json();
              datasetEntry = stockDataResponse;
            }
          } catch (error) {
            console.error('Error fetching stock data:', error);
          }
        }

        // 2. Merge with any user-supplied overrides
        const mergedData = {
          ...datasetEntry,
          ...(price && { 'Close Price': price }),
          ...(eps && { 'Earnings Per Share': eps }),
          ...(roe && { 'Return on Equity': roe }),
          ...(roce && { 'ROCE': roce }),
          ...(netMargin && { 'Net Profit Margin': netMargin }),
          ...(debtEquity && { 'Debt to Equity': debtEquity }),
          ...(promoterHolding && { 'Promoter Holding': promoterHolding }),
          ...(rsi && { 'RSI – 14D': rsi }),
          ...(analystRatings && { 'Percentage Buy Reco\'s': analystRatings })
        };

        // 3. Fetch historical data if available
        let historicalData = history;
        if (!historicalData) {
          try {
            const historyResponse = await fetch(`${req.nextUrl.origin}/api/stock?symbol=${symbol}&history=1`);
            if (historyResponse.ok) {
              historicalData = await historyResponse.json();
            }
          } catch (error) {
            console.error('Error fetching historical data:', error);
          }
        }

        // 4. Call OpenAI with complete data
        const prompt = `You are a senior investment analyst. Analyze the following stock data and provide a comprehensive investment evaluation.

Stock Data:
${JSON.stringify(mergedData, null, 2)}

${historicalData ? `Historical Data:
${JSON.stringify(historicalData, null, 2)}` : ''}

Please provide a detailed investment evaluation with the following sections:

1. **Financial Strength** - Analyze ROE, ROCE, Net Margin, Debt ratios, Interest coverage
2. **Growth Potential** - Analyze EPS growth, revenue growth, industry outlook
3. **Valuation** - Compare PE, PB ratios with sector averages, fair value assessment
4. **Ownership & Trust** - Promoter holding, institutional holding, pledging
5. **Market Sentiment & Technicals** - RSI, analyst ratings, price momentum
6. **₹100,000 Investment Simulation** - Show potential returns under different scenarios
7. **Investment Approach for ₹100,000** - Lump sum vs tranches with specific price points
8. **Final Recommendation Block** - Summary verdict with JSON format

Use simple language, clear headers, bullet points, and markdown tables. Be friendly and explain concepts clearly.`;

        const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${OPENAI_API_KEY}`
          },
          body: JSON.stringify({
            model: 'gpt-4o',
            messages: [{ role: 'user', content: prompt }],
            max_tokens: 4000,
            temperature: 0.3
          })
        });

        if (!openAIResponse.ok) {
          const errorText = await openAIResponse.text();
          console.error('OpenAI API error:', errorText);
          return NextResponse.json({ error: 'OpenAI API error' }, { status: 500 });
        }

        const openAIData = await openAIResponse.json();
        const insight = openAIData.choices[0]?.message?.content || 'No analysis available';

        return NextResponse.json({ insight });
      }
    } else {
      console.log('Processing advanced query...');
      
      // Advanced query processing
      try {
        // 1. Fetch all stock data
        console.log('Fetching all stock data...');
        const allStocksResponse = await fetch(`${req.nextUrl.origin}/api/stock?all=1`);
        
        if (!allStocksResponse.ok) {
          console.error('Failed to fetch all stocks:', allStocksResponse.status);
          return NextResponse.json({ error: 'Failed to fetch stock data' }, { status: 500 });
        }
        
        const allStocks = await allStocksResponse.json();
        console.log('Fetched', allStocks.length, 'stocks');
        
        // 2. Filter stocks based on query criteria
        console.log('Filtering stocks based on query:', query);
        const filteredStocks = allStocks.slice(0, 20); // Limit to top 20 for analysis
        
        // 3. Create analysis prompt
        const analysisPrompt = `You are a senior investment analyst. The user has asked: "${query}"

I have analyzed the Indian stock market and found ${filteredStocks.length} stocks that match the criteria. Here is the data for the top stocks:

${JSON.stringify(filteredStocks, null, 2)}

Please provide a comprehensive analysis with:

1. **Query Interpretation** - What the user is looking for
2. **Screening Criteria Used** - How you filtered the stocks
3. **Top Recommendations** - 5-10 best stocks with reasons
4. **Risk Assessment** - Potential risks and considerations
5. **Investment Strategy** - How to approach these stocks
6. **Portfolio Allocation** - Suggested allocation for ₹100,000
7. **Monitoring Triggers** - What to watch for

Use simple language, clear headers, bullet points, and markdown tables. Be friendly and explain concepts clearly.`;

        console.log('Calling OpenAI for advanced analysis...');
        const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${OPENAI_API_KEY}`
          },
          body: JSON.stringify({
            model: 'gpt-4o',
            messages: [{ role: 'user', content: analysisPrompt }],
            max_tokens: 4000,
            temperature: 0.3
          })
        });

        if (!openAIResponse.ok) {
          const errorText = await openAIResponse.text();
          console.error('OpenAI API error:', errorText);
          return NextResponse.json({ error: 'OpenAI API error' }, { status: 500 });
        }

        const openAIData = await openAIResponse.json();
        const insight = openAIData.choices[0]?.message?.content || 'No analysis available';

        console.log('Advanced analysis completed successfully');
        return NextResponse.json({ insight });
        
      } catch (error) {
        console.error('Error in advanced query processing:', error);
        return NextResponse.json({ error: 'Advanced query processing failed' }, { status: 500 });
      }
    }
  } catch (error) {
    console.error('General error in insights API:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
